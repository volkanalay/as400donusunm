//# sourceMappingURL=index.d.ts.map/// <reference types="react" /> export interface IDataTableScrollable { children?: any; className?: string; style?: React.CSSProperties; } export interface IRowOptions { className?: string; style?: React.CSSProperties; } export interface IDataTablePropType { buildRowOptions?: (any: any, number: any) => IRowOptions; currentPage?: number; gridOptions: IGridOptions; virtualization?: boolean; className?: string; } export interface IRowEdit { isRowEditable: boolean; editableRowIndex: number; initialRowData?: any; isTableEditable: boolean; row?: any; } export interface IDataTableStateType { selectAllChecked: boolean; rowEdit: IRowEdit; } export interface INoData { icon?: React.Component; title?: string; render?: () => React.Component; } export interface IGridOptions { actions?: IAction[]; columns: IColumn[]; defaultSort?: any; detail?: IDetail; pagination?: IPagination; selection?: ISelection; title?: any; onRowSelection?: (row: any) => any; noData?: INoData; editable?: boolean; } export interface IBaseHeaderPropType { actions?: IAction[]; columns: IColumn[]; detail?: IDetail; selection?: ISelection; rowEdit: IRowEdit; } export interface IHeaderPropType extends IBaseHeaderPropType { dataToShowArray: Array<any>; getSelectedItems: Function; filter?: Function; onSort?: any; selectAllChecked: boolean; setSelectedCount: Function; sortBy?: any; stateChanger: Function; } export interface IHeaderViewPropType extends IBaseHeaderPropType { columnOptions: IColumnOptions; multiSelectOptions?: IMultiSelectOptions; } interface IBaseBodyPropType { actions?: IAction[]; buildRowOptions?: Function; columns: IColumn[]; dataToShowArray: Array<any>; detail?: IDetail; selection?: ISelection; selectAllChecked?: boolean; noData?: INoData; onRowSelection?: Function; updateCell: Function; rowEdit: IRowEdit; stateChanger: Function; } export interface IBodyPropType extends IBaseBodyPropType { getSelectedItems?: Function; getSelectedCount?: Function; setSelectedCount?: Function; initialDataArrayLength?: number; } export interface IBodyViewPropType extends IBaseBodyPropType { onSingleSelectChange?: Function; onMultiSelectChange?: Function; } export interface IBodyViewStateType { selectedRow: any; } export interface IColumn { onFilter?: any; prop: string; title: string; filterable?: boolean; filterType?: any; sortable?: boolean; width?: number; className?: string; render?: Function; editableContent?: any; editableContentBlur?: Function; displayFunction?: Function; } /** * */ export interface IColumnOptions { sortBy: any; onSort: any; onFilterColumn: Function; buildSortProps: Function; } export interface ISelection { autoSelect?: boolean; title?: any; multiSelect?: boolean; onSelectionChange?: Function; } export interface IMultiSelectOptions { selectAllChecked?: boolean; onChange?: Function; } export interface IDetail { title?: any; render: any; } export interface IAction { title?: any; icon?: any; onClick?: (event: React.MouseEvent<HTMLTableDataCellElement, MouseEvent>, rowId: any) => void; } export interface IPagination { pageable?: boolean; pageSize: number; onPageChanged?: Function; } export { }; //# sourceMappingURL=index.d.ts.mapimport { IColumn, IRowEdit } from "../datatable"; export interface IEditableCellPropType { data?: any; editableContent?: any; onFocusOut?: any; displayFunction?: any; row?: any; rowEdit?: IRowEdit; rowId: number; col: IColumn; } export interface IEditableCellStateType { editing?: boolean; data?: any; initialData?: any; } //# sourceMappingURL=index.d.ts.mapimport { IBaseStyleType, IFormPropTypes } from '../../base'; export interface IRadioGroupPropTypes extends IFormPropTypes { style?: IRadioGroupStyleType; position?: RadioGroupPositions; border?: boolean; selectedSvg?: string; unSelectedSvg?: string; } export declare type RadioGroupPositions = 'vertical' | 'horizontal'; export interface IRadioGroupStyleType extends IBaseStyleType { } //# sourceMappingURL=index.d.ts.mapimport { IBaseStyleType, IFormPropTypes } from '../../base'; import { ITextFieldStyleType } from '../textfield'; export interface ITimePickerPropTypes extends IFormPropTypes { locale?: string; placeholder?: string; style?: ITimePickerStyleTypes; dismissLabel?: string; confirmLabel?: string; onConfirm?: (value: string) => void; onDismiss?: (() => void) | undefined; timeFormat?: TimeFormatTypes; } export interface ITimePickerStateTypes { show: boolean; toShowHourContainer?: boolean; degree: number; time: ITime; hour?: number | string | any; minute?: number | string | any; selectedIndexDegree?: any; isAmSelected: boolean; } export interface ITime { format12?: string; format24: string; } export declare enum TimeFormatTypes { FULL = "24", HALF = "12" } export interface IPosition { x: number; y: number; } export interface ITimePickerStyleTypes extends IBaseStyleType { input: ITextFieldStyleType; } //# sourceMappingURL=index.d.ts.mapimport { IBaseFormStyleType, IBaseStyleType, IFormPropTypes, IGenericStyleType } from '../../base'; export interface IRadioPropType extends IFormPropTypes { style?: IRadioStyleType; text?: string; checked: boolean; position?: RadioPosition; selectedSvg?: string; unSelectedSvg?: string; } export interface IRadioStyleType extends IBaseStyleType, IBaseFormStyleType { text?: IGenericStyleType; } export declare type RadioPosition = 'top' | 'right' | 'bottom' | 'left'; //# sourceMappingURL=index.d.ts.mapimport { IBaseStyleType, IFormPropTypes } from '../../base'; import { CSSProperties } from 'react'; import { TextStyle, ViewStyle } from 'react-native'; import { IOptionType } from '../select'; export interface IExtendedSelectPropType extends IFormPropTypes { options: Array<IOptionType>; placeholder?: string; isLoading?: boolean; noOptionsMessage?: string; autoFocus?: boolean; onChange?: (e: any, value?: any, data?: any) => any; validator?: Array<any>; dropdownIndicator?: any; loadingIndicator?: any; clearIndicator?: any; useNativeAndroidPickerStyle?: boolean; fixAndroidTouchableBug?: boolean; doneText?: string; style?: IExtendedSelectStyleType; isClearable?: boolean; isMulti?: boolean; isRtl?: boolean; isSearchable?: boolean; onInputChange?: (newValue: string, action: InputActionMeta) => void; backspaceRemovesValue?: true; defaultMenuIsOpen?: boolean; onMenuOpen?: () => void; onMenuClose?: () => void; } export interface IExtendedSelectStateType { value?: string | null; } export interface IExtendedSelectStyleType extends IBaseStyleType { dropdownIndicator: CSSProperties | ViewStyle; clearIndicator: CSSProperties | ViewStyle; loadingIndicator: CSSProperties | ViewStyle; indicatorSeparator: CSSProperties | ViewStyle; placeholderStyle: TextStyle; } export declare type InputActionTypes = 'set-value' | 'input-change' | 'input-blur' | 'menu-close'; export declare type InputActionMeta = { action: InputActionTypes; }; //# sourceMappingURL=index.d.ts.mapimport { IFormPropTypes, IGenericStyleType } from '../../base'; declare type placements = 'auto-start' | 'auto' | 'auto-end' | 'top-start' | 'top' | 'top-end' | 'right-start' | 'right' | 'right-end' | 'bottom-start' | 'bottom' | 'bottom-end' | 'left-end' | 'left-start' | 'left'; interface IDatePickerStyleType { container: IGenericStyleType; element: IGenericStyleType; header: IGenericStyleType; wrapper: IGenericStyleType; } export interface IDatePickerPropsType extends IFormPropTypes { id?: string; style?: IDatePickerStyleType; value?: any; maxDate?: any; minDate?: any; hideArrows?: boolean; hideExtraDays?: boolean; showWeekNumbers?: boolean; hideDayNames?: boolean; className?: any; dateFormat?: string; placeholder?: string; disabled?: boolean; inline?: boolean; excludeDates?: Array<Date>; includeDates?: Array<Date>; clearable?: boolean; showIcon?: boolean; shouldCloseOnSelect?: boolean; disableWeekend?: boolean; readOnly?: boolean; onMonthChange?: (date: any) => void; onChange?: (e: any, value?: string) => any; onBlur?: (e: any, value: string) => any; firstDay?: number; locale?: object | string; isNative?: boolean; popperPlacement?: placements; popperClassName?: string; disabledKeyboardNavigation?: boolean; onChangeRaw?: () => any; onClickOutside?: (event: any) => void; tabIndex?: number; startDate?: object | string; endDate?: object | string; showTimeInput?: boolean; showQuarterYearPicker?: boolean; showTimeSelect?: boolean; showYearPicker?: boolean; handleDatepickerKeyboardAction?: (event: any) => void; showMonthYearPicker?: boolean; timeCaption?: string; } export interface IDatePickerStateType { renderDatePicker: boolean; pickerOpened: boolean; } export { }; //# sourceMappingURL=index.d.ts.mapimport { IBaseFormStyleType, IBaseStyleType, ICheckableEventType, IFormPropTypes, IGenericStyleType } from '../../base'; import { ChangeEvent, MouseEvent, FocusEvent } from 'react'; export interface IBaseCheckboxStyleType extends IBaseFormStyleType, IBaseStyleType { icon?: IGenericStyleType; } export interface ICheckboxPropType extends IFormPropTypes { text?: string; checked?: boolean; style?: IBaseCheckboxStyleType; checkedSvg?: any; unCheckedSvg?: any; autoFocus?: boolean; onChange?: (e: ChangeEvent<HTMLInputElement> | ICheckableEventType, value: boolean) => any; onClick?: (event: MouseEvent<HTMLElement>) => void; onBlur?: (e: FocusEvent<HTMLInputElement>) => void; onMouseOut?: (event: MouseEvent<HTMLElement>) => void; onMouseOver?: (event: MouseEvent<HTMLElement>) => void; id?: string; disabled?: boolean; activeOpacity?: number; } export interface ICheckboxStateType { checkValue: boolean; } //# sourceMappingURL=index.d.ts.mapimport { MouseEvent } from 'react'; import { IBaseFormStyleType, IBaseStyleType, IFormPropTypes } from '../../base'; export interface IBaseLabelStyleType extends IBaseFormStyleType, IBaseStyleType { } export interface ILabelPropType extends IFormPropTypes { text?: string; style?: IBaseLabelStyleType; forId?: string; onMouseOut?: (e: MouseEvent<HTMLLabelElement>) => void; onMouseOver?: (e: MouseEvent<HTMLLabelElement>) => void; adjustsFontSizeToFit?: boolean; numberOfLines?: number; minimumFontScale?: number; } //# sourceMappingURL=index.d.ts.mapimport { StyleProp, TextStyle, NativeSyntheticEvent, TextInputFocusEventData } from 'react-native'; import { IBaseStyleType, IFormPropTypes, IGenericStyleType } from '../../base'; import { CSSProperties, Component, KeyboardEvent, MouseEvent } from 'react'; export interface ITextFieldPropTypes extends IFormPropTypes { placeholder?: string; readOnly?: boolean; validator?: any; isCapsLockOn?: boolean; style?: ITextFieldStyleType; leftIcon?: Component; rightIcon?: Component; loadingIcon?: Component; loading?: boolean; uppercase?: boolean; onKeyUp?: (event: KeyboardEvent<HTMLInputElement>) => void; onKeyDown?: (event: KeyboardEvent<HTMLInputElement>) => void; onClick?: (event: MouseEvent<HTMLInputElement>) => void; onCapsLockChange?: (event: any) => void; maxLength?: number; type?: EnumKeyboardType; autoFocus?: boolean; secureTextEntry?: boolean; onFocus?: (event: NativeSyntheticEvent<TextInputFocusEventData>) => void; autoComplete?: AutoCompleteValue; clearIndicator?: any; clearable?: boolean; } export interface ITextFieldStyleType extends IBaseStyleType { textField: CSSProperties | StyleProp<TextStyle>; clearIndicator: IGenericStyleType; } export interface ITextFieldStateType { focused?: boolean; } export declare enum EnumKeyboardType { Default = "default", Text = "text", Number = "number", Email = "email", Phone = "phone", Password = "password" } declare type AutoCompleteValue = 'on' | 'off' | 'name' | 'honorific-prefix' | 'given-name' | 'additional-name' | 'family-name' | 'honorific-suffix' | 'nickname' | 'username' | 'new-password' | 'current-password' | 'one-time-code' | 'organization-title' | 'organization' | 'street-address' | 'address-line1' | 'address-line2' | 'address-line3' | 'address-level4' | 'address-level3' | 'address-level2' | 'address-level1' | 'country' | 'country-name' | 'postal-code' | 'cc-name' | 'cc-given-name' | 'cc-additional-name' | 'cc-family-name' | 'cc-number' | 'cc-exp' | 'cc-exp-month' | 'cc-exp-year' | 'cc-csc' | 'cc-type' | 'transaction-currency' | 'transaction-amount' | 'language' | 'bday' | 'bday-day' | 'bday-month' | 'bday-year' | 'sex' | 'url' | 'photo'; export { }; //# sourceMappingURL=index.d.ts.mapimport { IBaseStyleType, IFormPropTypes } from '../../base'; import { CSSProperties } from 'react'; export interface IBaseSliderStyleType extends IBaseStyleType { slider?: SliderStyle; element?: CSSProperties; } export interface IBaseSliderPropType extends IFormPropTypes { min?: number; max?: number; step?: number; name: string; defaultValue?: number; handle?(props: any): React.ReactNode; included?: boolean; tabIndex?: number; disabled?: boolean; dots?: boolean; onBeforeChange?: () => any; onChange?: (event: any, value: number) => any; onAfterChange?(value: any): any | undefined; marks?: any; title?: string; } export interface SliderStyle { handleStyle?: CSSProperties; trackStyle?: CSSProperties; railStyle?: CSSProperties; dotStyle?: CSSProperties; activeDotStyle?: CSSProperties; maximumTrackStyle?: CSSProperties; } interface NativeSliderStyle extends SliderStyle { thumbTintColor?: string; minimumTrackTintColor?: string; } interface NativeSliderStyleType extends IBaseSliderStyleType { slider?: NativeSliderStyle; } export interface INativeSliderPropsType extends IBaseSliderPropType { style?: NativeSliderStyleType; } export interface SliderStateType { value: number; } export interface IWebSliderPropType extends IBaseSliderPropType { } export { }; //# sourceMappingURL=index.d.ts.mapimport { StyleProp, TextStyle, ViewStyle } from 'react-native'; import { IBaseStyleType, IFormPropTypes } from '../../base'; import { ReactNode } from 'react'; export interface ISwitchButtonPropTypes extends IFormPropTypes { style?: IBaseStyleType; checked: boolean; backgroundActiveColor?: string; backgroundInactiveColor?: string; circleActiveColor?: string; circleInActiveColor?: string; height?: number; width?: number; checkedIcon?: any; uncheckedIcon?: any; activeText?: string; inActiveText?: string; circleSize?: number; circleBorderActiveColor?: string; circleBorderInactiveColor?: string; activeTextStyle?: StyleProp<TextStyle>; inactiveTextStyle?: StyleProp<TextStyle>; containerStyle?: StyleProp<ViewStyle>; circleBorderWidth?: number; renderInsideCircle?: () => ReactNode; changeValueImmediately?: boolean; innerCircleStyle?: StyleProp<ViewStyle>; outerCircleStyle?: StyleProp<ViewStyle>; renderActiveText?: boolean; renderInActiveText?: boolean; switchLeftPx?: number; switchRightPx?: number; switchWidthMultiplier?: number; switchBorderRadius?: number; } export interface ISwitchButtonStateType { value: boolean; } //# sourceMappingURL=index.d.ts.mapimport { IBaseStyleType, IFormPropTypes } from '../../base'; import { Component } from 'react'; import { EnumKeyboardType } from '../textfield'; export interface IMaskedTextFieldPropTypes extends IFormPropTypes { readOnly?: boolean; mask: string; style?: IMaskedTextFieldStyleType; leftIcon?: Component; rightIcon?: Component; loadingIcon?: Component; type?: EnumKeyboardType; onChangeText?: (formatted: string, extracted?: string) => void; alwaysShowMask?: boolean; maskChar?: string; } export interface IMaskedTextFieldStyleType extends IBaseStyleType { } //# sourceMappingURL=index.d.ts.mapimport { IBaseStyleType, IFormPropTypes } from '../../base'; export interface ITextAreaPropTypes extends IFormPropTypes { placeholder?: string; readOnly?: boolean; useCacheForDOMMeasurements?: boolean; minRows?: number; maxRows?: number; maxLength?: number; validator?: any; onHeightChange?: (height: number) => void; inputRef?: Function; autoFocus?: boolean; defaultHeight?: number; input?: any; bordered?: boolean; style?: ITextAreaFieldStyleType; cacheMeasurements?: boolean; } export interface ITextAreaFieldStyleType extends IBaseStyleType { } export interface ITextAreaStateType { height: number; focused: boolean; } //# sourceMappingURL=index.d.ts.mapimport { IBaseStyleType, IFormPropTypes } from '../../base'; import { CSSProperties } from 'react'; import { TextStyle, ViewStyle } from 'react-native'; export interface ISelectPropType extends IFormPropTypes { options: Array<IOptionType>; placeholder?: string; isLoading?: boolean; noOptionsMessage?: string; autoFocus?: boolean; onChange?: (e: any, value?: any, data?: any) => any; validator?: Array<any>; dropdownIndicator?: any; loadingIndicator?: any; clearIndicator?: any; useNativeAndroidPickerStyle?: boolean; fixAndroidTouchableBug?: boolean; doneText?: string; style?: ISelectStyleType; clearable?: boolean; searchable?: boolean; } export interface IOptionType { value: string; label: string; } export interface ISelectStateType { value?: string | null; } export interface ISelectStyleType extends IBaseStyleType { dropdownIndicator: CSSProperties | ViewStyle; clearIndicator: CSSProperties | ViewStyle; loadingIndicator: CSSProperties | ViewStyle; indicatorSeparator: CSSProperties | ViewStyle; placeholderStyle: TextStyle; } //# sourceMappingURL=index.d.ts.mapexport * from './checkbox'; //# sourceMappingURL=index.d.ts.mapimport { ViewStyle } from 'react-native'; import { IBasePropType, IBaseStyleType } from '../../base'; import { Component, CSSProperties, FC, ReactNode } from 'react'; export declare enum EnumTooltipPositions { TOP = "top", RIGHT = "right", LEFT = "left", BOTTOM = "bottom" } export interface ITooltipPropType extends IBasePropType { position?: EnumTooltipPositions; text?: string; leftIcon?: Component; style?: ITooltipStyleType; showChildInTooltip?: boolean; backgroundColor?: string; } export interface ITooltipStyleType extends IBaseStyleType { tooltip: CSSProperties | ViewStyle; } export interface ITooltipStateType { toolTipVisible?: boolean; showPopover?: boolean; visibility?: boolean; tooltipStyle?: ITooltipDirectionStyle; } export interface ITooltipElementPropType extends IBasePropType { showPopover?: boolean; visibility?: boolean; text?: string; tooltipStyle?: ITooltipDirectionStyle; containerStyle: CSSProperties; customTooltipStyle: CSSProperties; } interface ITooltipDirectionStyle { left?: string; top?: string; right?: string; bottom?: string; } export interface ITooltipBodyProps { children?: ReactNode | FC | any; style?: CSSProperties; } export { }; //# sourceMappingURL=index.d.ts.mapimport { IBaseStyleType } from '../../base'; import { TextStyle } from 'react-native'; import { CSSProperties } from 'react'; export interface IBaseMessageStyleType extends IBaseStyleType { message: CSSProperties | TextStyle; } //# sourceMappingURL=index.d.ts.mapexport * from './tooltip'; //# sourceMappingURL=index.d.ts.mapimport { IBasePropType, IBaseStyleType, IGenericStyleType } from '../../base'; declare type sizeType = 'small' | 'medium' | 'large' | 'full'; export interface IModalPropType extends IBasePropType { show?: boolean; isClosable?: boolean; size?: sizeType; style?: IModalStyleType; } export interface IModalHeaderPropType extends IBasePropType { closeModal?: (e: any) => void; closable?: boolean; style?: IModalHeaderStyleType; } export interface IModalStyleType extends IBaseStyleType { overlay?: IGenericStyleType; } export interface IModalHeaderStyleType extends IBaseStyleType { title?: IGenericStyleType; close?: IGenericStyleType; } export interface IModalBodyPropType extends IBasePropType { style?: IGenericStyleType; } export interface IModalFooterPropType extends IBasePropType { style?: IGenericStyleType; } export { }; //# sourceMappingURL=index.d.ts.mapimport { CSSProperties } from 'react'; import { IBasePropType, IBaseStyleType } from '../../base'; export interface IFormPropType extends IBasePropType { name?: string; className?: string; validate?: Function; validateAll?: any; showError?: Function; hideError?: Function; hideErrors?: Function; autoUpdateParent?: boolean; resetValues?: any; handleChange?: any; handleBlur?: (e: any) => any; getErrorField?: () => any; getValues?: any; onReset?: (e?: any) => void; onSubmit?: (e?: any, values?: any) => void; onError?: (e?: any, errorFields?: any) => void; onChange?: Function; style?: IFormStyleType; value?: any; } export interface IFormStyleType extends IBaseStyleType { form?: CSSProperties; } export interface IFormGroupPropType extends IBasePropType { style?: IFormGroupStyleType; } export interface IFormGroupStyleType extends IBaseStyleType { message?: CSSProperties; } export interface IAbstractPureFormComponentState { meta: any; } export interface IFormComponent<P = {}, S = React.ComponentState> extends React.ComponentClass<P, S> { Group: React.ComponentClass; } //# sourceMappingURL=index.d.ts.map/// <reference types="react" /> import { IBasePropType, IBaseStyleType, IGenericStyleType } from '../../base'; export interface IPanelPropTypes extends IBasePropType { className?: string; style?: IGenericStyleType; } export interface IPanelHeaderPropTypes extends IBasePropType { title?: string | React.ReactNode | React.FC; style?: IGenericStyleType; } export interface IPanelHeaderStyleTypes extends IBaseStyleType { title?: IGenericStyleType; close?: IGenericStyleType; } export interface IPanelBodyPropTypes extends IBasePropType { className?: string; style?: IGenericStyleType; } export interface IPanelFooterPropTypes extends IBasePropType { style?: IGenericStyleType; className?: string; } export interface IPanelDividerPropTypes extends IBasePropType { style?: IGenericStyleType; className?: string; } //# sourceMappingURL=index.d.ts.mapimport { ReactNode, FC } from 'react'; import { IBasePropType, IBaseStyleType } from '../../base'; export interface IAccordionPropTypes extends IBasePropType { style?: IAccordionStyleType; accordionItems: Array<IAccordionItemsType>; activeIndex?: number; multipleOpenable?: boolean; activeIcon?: string | ReactNode | FC; inActiveIcon?: string | ReactNode | FC; onClick: (index: number) => void; onPress?: (index: number) => void; } interface IAccordionStyleType extends IBaseStyleType { } export interface IAccordionItemsType { header?: string | ReactNode | FC; content?: string | ReactNode | FC; } export interface IBaseAccordionStateType { accordionItems: Array<IAccordionItemsStateType>; } export interface IAccordionItemsStateType { header?: string | ReactNode | FC; content?: string | ReactNode | FC; isOpen?: boolean; } export interface IAccordionItemPropType { accordionItem: IAccordionItemsStateType; index: number; onClick?: (index: number) => void; onPress?: (index: number) => void; activeIcon?: string | ReactNode | FC; inActiveIcon?: string | ReactNode | FC; contextValue?: any; style?: React.CSSProperties; } export { }; //# sourceMappingURL=index.d.ts.mapimport { IBasePropType } from '../../base'; export interface IWizardPropTypes extends IBasePropType { currentStep?: number; next?: (callback: Function) => void; previous?: (callback: Function) => void; jumpToStep?: (step: number, callback?: Function) => void; jumpToModule?: (module: string, callback?: Function) => void; enablePreviewMode?: boolean; jumpToMe?: () => void; stepInfo?: Array<any>; } export interface IWizardStateType { currentStep: number; } //# sourceMappingURL=index.d.ts.map/// <reference types="react" /> import { IBasePropType, IGenericStyleType } from '../../base'; export interface IContainerPropType extends IBasePropType { type?: JSX.IntrinsicElements | EnumContainerType; fluid?: boolean; noPadding?: boolean; style?: IGenericStyleType; } export declare enum EnumContainerType { View = "View", TouchableOpacity = "TouchableOpacity", Other = "Other" } //# sourceMappingURL=index.d.ts.mapexport * from './container'; //# sourceMappingURL=index.d.ts.mapimport React, { CSSProperties, MouseEvent, Key, ReactInstance, KeyboardEvent } from 'react'; import { IBasePropType } from '../../base'; declare type ModeType = 'horizontal' | 'vertical' | 'vertical-left' | 'vertical-right' | 'inline'; declare type HoverEvent = (info: { key: Key; domEvent: MouseEvent<HTMLElement>; }) => void; declare type OnClick = (info: { key: Key; keyPath: Key[]; item: ReactInstance; domEvent: MouseEvent<HTMLElement>; }) => void; declare type Select = (info: { selectedKeys?: React.Key[]; }) => void; interface IMenuItem { key: string | number; disabled?: boolean; onClick?: OnClick; onMouseEnter?: HoverEvent; onMouseLeave?: HoverEvent; style?: CSSProperties; } interface IDataArray extends IMenuItem { onTitleClick?: (info: { key: Key; domEvent: MouseEvent<HTMLElement> | KeyboardEvent<HTMLElement>; }) => void; children?: IMenuItem; } export interface INavbarPropType extends IBasePropType { mode?: ModeType; defaultSelectedKeys?: string[]; onClick?: OnClick; onSelect?: Select; onDeselect?: Select; defaultActiveFirst?: boolean; selectable?: boolean; selectedKeys?: string[]; openAnimation?: string | Record<string, any>; dataArray?: Array<IDataArray>; style?: INavbarStyleType; } export interface INavbarStyleType { container?: CSSProperties; menu?: CSSProperties; menuItem?: CSSProperties; subMenu?: CSSProperties; } export { }; //# sourceMappingURL=index.d.ts.mapimport { IBaseStyleType, IBasePropType } from '../../base'; import { CSSProperties } from 'react'; export interface IPaginationPropTypes extends IBasePropType { activePage: number; lastPage: number; first?: boolean; last?: boolean; prev?: boolean; next?: boolean; boundaryLinks: boolean; leftBehind: boolean; style?: IPaginationStyleType; onChange?: (page: number) => void; firstIcon: string; lastIcon: string; prevIcon: string; nextIcon: string; } export interface IPaginationStateType { size: any; activePage: number; } export interface IPaginationStyleType extends IBaseStyleType { pagination?: CSSProperties; element?: CSSProperties; } //# sourceMappingURL=index.d.ts.mapimport { IBasePropType, IBaseStyleType, IGenericStyleType } from '../../base'; import { Component, MouseEvent, ReactElement } from 'react'; import { GestureResponderEvent } from 'react-native'; interface IBaseTabStyleType extends IBaseStyleType { header?: IGenericStyleType; } interface IBaseTabItemStyleType { item?: IGenericStyleType; } export interface ITabPropType extends IBasePropType { activeTab?: number; className?: any; scrollable?: boolean; style?: IBaseTabStyleType; onChange?: (i: number) => void; } export interface ITabStateType { activeTab?: number; stateUpdate?: boolean; } export interface ITabItemPropType extends IBasePropType { text?: string; active?: boolean; leftIcon?: Component | ReactElement; rightIcon?: Component | ReactElement; style?: IBaseTabItemStyleType; onClick?: (e: MouseEvent<HTMLElement> | GestureResponderEvent) => void; } export interface ITabItemStateType { textWidth: number; iconWidth: number; width: any; } export { }; //# sourceMappingURL=index.d.ts.mapimport { GestureResponderEvent } from 'react-native'; import { INavigationStyleType, IBasePropType, IBaseStyleType } from '../../base'; import { Component, MouseEvent } from 'react'; export interface IButtonPropTypes extends IBasePropType { style?: IButtonStyleType; text?: string; fetching?: boolean; leftIcon?: Component; rightIcon?: Component; onClick?: (event: MouseEvent<HTMLElement> | GestureResponderEvent) => void; onMouseOver?: (event: MouseEvent<HTMLElement>) => void; onMouseOut?: (event: MouseEvent<HTMLElement>) => void; autoFocus?: boolean; fetchingIcon?: Component; custom?: boolean; underlayColor?: string; type?: buttonType; } export interface IButtonStyleType extends INavigationStyleType, IBaseStyleType { } declare type buttonType = 'submit' | 'reset' | 'button'; export { }; //# sourceMappingURL=index.d.ts.mapimport { GestureResponderEvent } from 'react-native'; import { INavigationStyleType, IBasePropType, IBaseStyleType, IGenericStyleType } from '../../base'; import { Component, MouseEvent } from 'react'; export interface ILinkPropType extends IBasePropType { href?: string; text?: string; style?: ILinkStyleType; onClick?: (event: MouseEvent<HTMLElement> | GestureResponderEvent) => void; leftIcon?: Component; rightIcon?: Component; activeOpacity?: number; } export interface ILinkStyleType extends INavigationStyleType, IBaseStyleType { link: IGenericStyleType; } //# sourceMappingURL=index.d.ts.mapexport * from './button'; //# sourceMappingURL=index.d.ts.mapimport { TextStyle } from 'react-native'; import { IBaseStyleType, IBasePropType } from '../../base'; import { CSSProperties } from 'react'; export interface IBaseElementStyleType extends IBaseStyleType { element: CSSProperties | TextStyle; } declare type type = 'abbr' | 'address' | 'b' | 'blockquote' | 'br' | 'nav' | 'canvas' | 'caption' | 'cite' | 'dfn' | 'em' | 'embed' | 'figcaption' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'hr' | 'i' | 'iframe' | 'kbd' | 'legend' | 'ul' | 'li' | 'mark' | 'object' | 'p' | 'param' | 'q' | 'source' | 'span' | 'strong' | 'sub' | 'sup' | 'td' | 'th' | 'time' | 'u'; export declare enum EnumElementType { TIME = "time", TD = "td", SUP = "sup", STRONG = "strong", SOURCE = "source", Q = "q", P = "p", OBJECT = "object", MARK = "mark", LEGEND = "legend", KBD = "kbd", IFRAME = "iframe", I = "i", HR = "hr", H6 = "h6", H4 = "h4", H3 = "h3", H2 = "h2", H1 = "h1", FIGCAPTION = "figcaption", EMBED = "embed", DFN = "dfn", CITE = "cite", CAPTION = "caption", CANVAS = "canvas", NAV = "nav", BLOCKQUOTE = "blockquote", B = "b", ADDRESS = "address", ABBR = "abbr", SPAN = "span" } export interface IElementPropType extends IBasePropType { type?: type; onClick?: (e: any) => void; style?: IElementStyle; } export interface IElementNativePropType extends IBasePropType { type?: EnumElementType; onClick?: () => void; style?: IElementStyle; } export interface IElementStyle extends IBaseElementStyleType { } export interface IElementStateType { } export { }; //# sourceMappingURL=index.d.ts.mapexport * from './element'; //# sourceMappingURL=index.d.ts.mapimport { IBasePropType, IBaseStyleType } from '../../base'; export interface IBadgePropType extends IBasePropType { text?: string; type?: BadgeTypes; alignment?: { vertical: VerticalAlignment; horizontal: HorizontalAlignment; }; style?: IBadgeStyleType; } export interface IBadgeStateType { width: number; height: number; } export interface IBadgeStyleType extends IBaseStyleType { } export declare enum VerticalAlignment { TOP = "top", BOTTOM = "bottom" } export declare enum HorizontalAlignment { RIGHT = "right", LEFT = "left" } export declare enum BadgeTypes { SUCCESS = "success", INFO = "info", WARNING = "warning", DANGER = "danger" } //# sourceMappingURL=index.d.ts.mapexport * from './base'; //# sourceMappingURL=index.d.ts.mapimport { TextStyle, ViewStyle } from 'react-native'; import { ReactNode, FC, CSSProperties } from 'react'; export interface IBasePropType { id?: string; children?: ReactNode | FC | any | Element; disabled?: boolean; className?: string; name?: string; contextValue?: any; } export declare type IGenericStyleType = CSSProperties | ViewStyle | TextStyle; export interface IFormPropTypes extends IBasePropType { partofform?: boolean; validation?: any; value?: any; isChanged?: any; isUsed?: any; error?: any; onChange?: (event: any, value: any, ...args: any[]) => any; onBlur?: (event: any, value: any, ...args: any[]) => any; } export interface IBaseStyleType { container?: IGenericStyleType; element?: IGenericStyleType; } export interface IBaseTextStyleType { element?: IGenericStyleType; text?: IGenericStyleType; } export interface IBaseGridStyleType { style?: IGenericStyleType; } export interface INavigationStyleType extends IBaseTextStyleType { } export interface IBaseFormStyleType extends IBaseTextStyleType { } export interface ICheckableEventType { nativeEvent: { text: any; checked: boolean; }; } //# sourceMappingURL=index.d.ts.mapimport { IBasePropType, IGenericStyleType } from '../../base'; export interface IRowPropType extends IBasePropType { style?: IGenericStyleType; } //# sourceMappingURL=index.d.ts.mapexport * from './block'; //# sourceMappingURL=index.d.ts.mapimport { IBasePropType, IGenericStyleType } from '../../base'; export interface IColPropType extends IBasePropType { xs?: size; md?: size; lg?: size; xl?: size; xsOffset?: size; mdOffset?: size; lgOffset?: size; xlOffset?: size; className?: string; style?: IGenericStyleType; } export declare type size = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 0; //# sourceMappingURL=index.d.ts.mapimport { IBasePropType } from '../../base'; import { GestureResponderEvent, ViewStyle } from 'react-native'; import { CSSProperties, MouseEvent } from 'react'; export interface IBlockPropType extends IBasePropType { tabIndex?: number; className?: string; type?: EnumBlockType; style?: CSSProperties | ViewStyle; onClick?: (event: MouseEvent<HTMLElement> | GestureResponderEvent) => void; } export declare enum EnumBlockType { DIV = "div", TOUCHABLEHIGHLIGHT = "TouchableHighlight", TOUCHABLEOPACITY = "TouchableOpacity", TEXT = "Text", SCROLLVIEW = "ScrollView" } //# sourceMappingURL=index.d.ts.mapimport { IBasePropType, IBaseStyleType, IGenericStyleType } from '../../base'; export interface ICarouselPropTypes extends IBasePropType { focusOnSelect?: boolean; autoplay?: boolean; centerMode?: boolean; autoplaySpeed?: number; afterChange?: Function; beforeChange?: Function; variableWidth?: boolean; arrows?: boolean; dots?: boolean; infinite?: boolean; vertical?: boolean; adaptiveHeight?: boolean; dotsClass?: any; initialSlide?: number; slidesToShow?: number; slidesToScroll?: number; responsive?: any; style?: ICarouselStyleType; } export interface ICarouselStyleType extends IBaseStyleType { element?: IGenericStyleType; container?: IGenericStyleType; } //# sourceMappingURL=index.d.ts.mapimport { ImageStyle, ImageURISource } from 'react-native'; import { IBaseStyleType, IBasePropType } from '../../base'; import { CSSProperties, SyntheticEvent } from 'react'; export interface IImageStyleType extends IBaseStyleType { element?: CSSProperties | ImageStyle; container?: CSSProperties | ImageStyle; } export interface IImagePropType extends IBasePropType { style?: IImageStyleType; alt?: string; path?: string; onClick?: () => void; onLoad?: (event: SyntheticEvent<HTMLImageElement, Event>) => void; onError?: (event: SyntheticEvent<HTMLImageElement, Event>) => void; onPress?: () => void; source?: ImageURISource; isTouchable?: boolean; activeOpacity?: number; } //# sourceMappingURL=index.d.ts.mapimport { ImageStyle, GestureResponderEvent, LayoutChangeEvent } from 'react-native'; import { IBasePropType, IBaseStyleType } from '../../base'; import { CSSProperties, MouseEvent } from 'react'; export interface IIconStyleType extends IBaseStyleType { icon: CSSProperties | ImageStyle; } export interface IIconPropType extends IBasePropType { fill?: string; width?: number; height?: number; style?: IIconStyleType; icon?: string; Icons?: any; viewBox?: string; onLayout?: (event: LayoutChangeEvent) => void; onClick?: (event: MouseEvent<HTMLElement> | GestureResponderEvent) => void; }
